name: Security Scanning

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run weekly security scans
    - cron: "0 2 * * 1"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety bandit[toml]

      - name: Run safety check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload safety report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 30

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run bandit security linter
        run: |
          bandit -r trackit/ -f json -o bandit-report.json || true
          bandit -r trackit/ -ll -i

      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
          retention-days: 30

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          trivy-config: |
            format: 'sarif'
            output: 'trivy-secrets.sarif'
            exit-code: '0'
            severity: 'CRITICAL,HIGH,MEDIUM'
            scanners: 'secret'

      - name: Upload Trivy secrets scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-secrets.sarif"
          category: "trivy-secrets"

  vulnerability-scan:
    name: Vulnerability Assessment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0"

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-vuln"

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs:
      [dependency-security, code-security, secrets-scan, vulnerability-scan]
    if: always()
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: Security scan summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Completed Scans:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency vulnerability scan (safety)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code security analysis (bandit)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secrets detection (trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Vulnerability assessment (trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Static analysis (CodeQL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Report Artifacts:" >> $GITHUB_STEP_SUMMARY
          ls -la security-reports/ >> $GITHUB_STEP_SUMMARY || echo "No security report artifacts found" >> $GITHUB_STEP_SUMMARY
