name: Release & Publish

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libgtk-3-0 libgdk-pixbuf2.0-0 libxss1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="${{ github.event.inputs.version }}"
          else
            TAG=${GITHUB_REF#refs/*/}
            VERSION=${TAG#v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Tag: $TAG"

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

      - name: Validate pyproject.toml version
        run: |
          PYPROJECT_VERSION=$(python -c "import tomllib; f=open('pyproject.toml','rb'); data=tomllib.load(f); print(data['project']['version'])")
          if [ "$PYPROJECT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Version mismatch!"
            echo "Tag version: ${{ steps.version.outputs.version }}"
            echo "pyproject.toml version: $PYPROJECT_VERSION"
            echo "Please update pyproject.toml version to match the release tag"
            exit 1
          fi

      # - name: Run tests
      #   env:
      #     CI: "true"
      #     DISPLAY: ":99"
      #     TRACKIT_HEADLESS: "true"
      #   run: |
      #     # Start virtual display
      #     Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #     sleep 1

      #     pytest --cov=trackit --cov-fail-under=90

      # - name: Run quality checks
      #   run: |
      #     black --check trackit/
      #     isort --check-only trackit/
      #     flake8 trackit/
      #     mypy trackit/

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check distribution
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/
          retention-days: 30

  test-install:
    name: Test Installation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    needs: [validate-release, build]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Install from wheel
        run: |
          pip install dist/*.whl

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libgtk-3-0 libgdk-pixbuf2.0-0 libxss1

      - name: Test CLI functionality
        env:
          CI: "true"
          TRACKIT_HEADLESS: "true"
          DISPLAY: ":99"
        run: |
          # Start virtual display for Linux
          if [ "$RUNNER_OS" = "Linux" ]; then
            Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
            sleep 1
          fi

          tracker --help
          tracker version
          # Test basic functionality
          tracker start "Release test" --tag release
          sleep 1
          tracker status
          tracker stop
          tracker log

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, build, test-install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate changelog
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### Commits since $PREVIOUS_TAG:" >> release_notes.md
            git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD >> release_notes.md
          else
            echo "### Initial Release" >> release_notes.md
            echo "- First release of TrackIt CLI time tracker" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "pip install trackit==${{ needs.validate-release.outputs.version }}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Full Changelog" >> release_notes.md
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "**Full Changelog**: https://github.com/theany-org/trackit/compare/$PREVIOUS_TAG...${{ needs.validate-release.outputs.tag }}" >> release_notes.md
          else
            echo "**Full Changelog**: https://github.com/theany-org/trackit/commits/${{ needs.validate-release.outputs.tag }}" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: TrackIt ${{ needs.validate-release.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, build, test-install, create-release]
    environment:
      name: pypi
      url: https://pypi.org/p/trackit/
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, build, test-install]
    if: contains(needs.validate-release.outputs.version, '-') || github.event.inputs.prerelease == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/trackit/
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-release, publish-pypi]
    if: always() && needs.publish-pypi.result == 'success'
    steps:
      - name: Release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ TrackIt ${{ needs.validate-release.outputs.version }} Released Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GitHub Release**: https://github.com/theany-org/trackit/releases/tag/${{ needs.validate-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**PyPI Package**: https://pypi.org/project/trackit/${{ needs.validate-release.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation Command:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install trackit==${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Notify about documentation updates
        run: |
          echo "📝 Remember to update documentation if needed:" >> $GITHUB_STEP_SUMMARY
          echo "- Update README.md examples if new features were added" >> $GITHUB_STEP_SUMMARY
          echo "- Review and update CHANGELOG.md" >> $GITHUB_STEP_SUMMARY
          echo "- Consider updating project roadmap" >> $GITHUB_STEP_SUMMARY
